<style lang="less">
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'

export default class extends wepy.app {
  config = {
    debug: true,
    pages: [
      'pages/index',
      'pages/userinfo',
      'pages/demo'
    ],
    subpackages: [
      {
        root: 'packageClient',
        name: 'client',
        independent: false,
        pages: ['pages/demo']
      },
      {
        root: 'packageServer',
        name: 'server',
        independent: false,
        pages: ['pages/demo']
      }
    ],
    preloadRule: {
      'pages/index': {
        packages: ['client', 'server']
      }
    },
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: 'WeChat',
      navigationBarTextStyle: 'black'
    },
    tabBar: {
      list: [
        {
          'pagePath': 'pages/index',
          'text': '首页',
          'iconPath': 'images/tab/home.png',
          'selectedIconPath': 'images/tab/home-active.png'
        },
        {
          'pagePath': 'pages/userinfo',
          'text': '我的',
          'iconPath': 'images/tab/user.png',
          'selectedIconPath': 'images/tab/user-active.png'
        },
        {
          'pagePath': 'pages/demo',
          'text': 'Demo',
          'iconPath': 'images/tab/demo.png',
          'selectedIconPath': 'images/tab/demo-active.png'
        }
      ]
    }
  }

  globalData = {
    appid: 'wxa55f028bafde4230',
    domain: 'http://wepy.shilikaif.com:801', // wepy.$appConfig.baseUrl,
    openid: null,
    userInfo: null
  }

  constructor () {
    super()
    this.use('requestfix')
    this.use('promisify')
    // 拦截request请求
    this.intercept('request', {
      // 发出请求时的回调函数
      config (p) {
        if (typeof p === 'object') {
          if (p.hasOwnProperty('header')) {
            if (!p.header.hasOwnProperty('APPID')) {
              p.header['APPID'] = this.globalData.appid
            }
            if (this.globalData.openid) {
              p.header['OPENID'] = this.globalData.openid
            }
          } else {
            p['header'] = {}
            p.header['APPID'] = this.globalData.appid
            if (this.globalData.openid) {
              p.header['OPENID'] = this.globalData.openid
            }
          }
        }
        // 对所有request请求中的OBJECT参数对象统一附加时间戳属性
        p.timestamp = +new Date()
        console.log('config request: ', p)
        // 必须返回OBJECT参数对象，否则无法发送请求到服务端
        return p
      },

      // 请求成功后的回调函数
      success (p) {
        // 可以在这里对收到的响应数据对象进行加工处理
        console.log('request success: ', p)
        // 必须返回响应数据对象，否则后续无法对响应数据进行处理
        return p
      },

      // 请求失败后的回调函数
      fail (p) {
        console.log('request fail: ', p)
        // 必须返回响应数据对象，否则后续无法对响应数据进行处理
        return p
      },

      // 请求完成时的回调函数(请求成功或失败都会被执行)
      complete (p) {
        console.log('request complete: ', p)
      }
    })
  }

  onLaunch() {
    this.testAsync()
  }

  sleep (s) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve('promise resolved')
      }, s * 1000)
    })
  }

  async testAsync () {
    const data = await this.sleep(3)
    console.log(data)
  }
}
</script>
